#!/usr/bin/env bash

if ! [[ "$udcVersion" ]] || ! . uset.env ; then
    echo "Error: Unitialized environnement" >&2
    [[ "${0##*/}" == "bash" ]] && return 255 || exit 255
fi

[[ "$Currency" ]] || UDinit || $udc_exit 255


function UDircbot {

    # irc.cat.pdx.edu 6667 : Why not ?
    # irc.oftc.net 6667    : Good
    # irc.lfnet.org 6667   : The same as bitcoin, solidcoin, namecoin ... ;-)

local line IrcLogpipe IrcNick src command target args i free IrcDate SrcCurrent=() SrcTimeIn=() 
local IrcUser="${myaccounts[0]}"
local IrcComment="${myudid2h:-$myudid2c}"
local IrcChan="#udc.$Currency"
local Ircfifo="$TmpDir/ircfifo"
local Irclogfile="irc_$Currency.log"
[[ "$1" ]] && IrcLogpipe="tee -a $Irclogfile" || IrcLogpipe="cat"
local IrcServ="${2:-irc.lfnet.org 6667}"

trap "rm -vf \"$Ircfifo\" ; ps -o pid,command | while read pid comm ; do [[ \"\$comm\" =~ ^\"tail -f $Ircfifo\" ]] && kill \$pid ; done " EXIT

while true ; do 
    IrcNick="${IrcUser:32}"
    mkfifo "$Ircfifo" || return 249

    while read -t 510 src command target args ; do
        [[ "$IrcLogpipe" != "cat" ]] && echo "$(date -R)<- $src $command $target $args" >> "$Irclogfile"
        case "$src" in
            "PING") echo "PONG :hostname" | $IrcLogpipe >> "$Ircfifo" ;;
            "ERROR") break ;;
        esac
        src="${src:1}" # Remove 1st char ':' 
        case "$command" in
            NOTICE) echo >> "$Ircfifo" ;;
            43?) IrcNick="_$IrcNick" ; echo -e "NICK $IrcNick\nJOIN $IrcChan" | $IrcLogpipe >> "$Ircfifo" ;;
            PRIVMSG)
                SrcNick="${src%%\!*}"
                case "$target" in
                    "$IrcChan")
                        #echo "Message in main chan from $SrcNick: $(echo "${args}" | hexdump -C)" >&2
                        for i in "${!SrcCurrent[@]}" 32768 ; do 
                            [[ "${SrcCurrent[$i]}" == "$src" ]] && break
                        done
                        if [[ "${args:1:27}" == "-----BEGIN PGP MESSAGE-----" ]] ; then
                            echo "New Message detected $i - ${!SrcCurrent[@]} " >&2
                            if ((i>=32768)) ; then # New Slot
                                free=0
                                IrcDate="$(date +%s)"
                                for i in "${!SrcCurrent[@]}"; do
                                    # Remove zombies
                                    if (( IrcDate > SrcTimeIn[$i] + 180 )) ; then 
                                        echo "PRIVMSG ${SrcCurrent[$i]%%\!*} :Error: Timeout Reached" | $IrcLogpipe >> "$Ircfifo"
                                        unset IrcMsg[$i] SrcCurrent[$i] SrcTimeIn[$i]
                                    fi
                                    if ((i==free)) ; then
                                        ((free++)) # search first free slot
                                    else
                                        break
                                    fi
                                done
                                i="$free"
                                SrcCurrent[$i]="$src"
                                echo "New slot $i" >&2
                            fi
                            SrcTimeIn[$i]="$IrcDate"
                            IrcMsg[$i]="${args:1}
"
                        elif ((i<32768)) ; then

                            if [[ ${#IrcMsg[@]} -lt 64 ]] ; then
                                IrcMsg[$i]+="${args:1}
"
                                if [[ "${args:1:25}" == "-----END PGP MESSAGE-----" ]] ; then 
                                    echo "End Message - slot $i" >&2
                                    echo "${IrcMsg[$i]}" > SrcMessage
                                    if SrcFprint[$i]="$(echo "${IrcMsg[$i]}" | LANGUAGE=en $udc_gpg --verify --batch --no-verbose --with-fingerprint 2>&1 )" \
                                        && SrcFprint[$i]="$(echo "SrcFprint[$i]" | sed -n ' $s, ,,g ; $s,.*:\([0-9A-F]\{40\}\),\1,p ')" \
                                        && [[ "${SrcFprint[$i]}" ]] ; then
                                        if  udc_isaccount "${SrcFprint[$i]}" ; then 
                                            mapfile SrcMessage < <(echo "${IrcMsg[$i]}" | LANGUAGE=en $udc_gpg --decrypt --batch --no-verbose )
                                            #for i in ${!SrcMessage[@]} ; do echo "PRIVMSG $SrcNick :${SrcMessage[$i]}" ; done | $IrcLogpipe >> "$Ircfifo"
                                            if [[ "${SrcMessage[0]}" == "d=t2e" ]] \
                                                && [[ "${SrcMessage[1]}" == "$Currency" ]] \
                                                && ((SrcMessage[2]>0)) \
                                                && udc_isaccount "${SrcMessage[3]}" ; then
                                                    SrcN=SrcMessage[2] ;
                                                    unset SrcMessage[0] SrcMessage[1] SrcMessage[2] SrcMessage[3]
                                                    for grain in "{$SrcMessage[@]}" ; do 
                                                    # (...)
                                                done
                                                echo "PRIVMSG $SrcNick :Success: I validate your transaction ${SrcMessage[2]}" | $IrcLogpipe >> "$Ircfifo"
                                            else
                                                echo "PRIVMSG $SrcNick :Error: Unreconized message : ${SrcMessage[0]} ${SrcMessage[1]} ${SrcMessage[2]} ..." | $IrcLogpipe >> "$Ircfifo"
                                            fi
                                        else
                                            #mapfile SrcMessage < <(echo "${IrcMsg[$i]}" | LANGUAGE=en $udc_gpg --decrypt --batch --no-verbose )
                                            #for i in ${!SrcMessage[@]} ; do echo "PRIVMSG $SrcNick :${SrcMessage[$i]}" ; done | $IrcLogpipe >> "$Ircfifo"
                                            echo "PRIVMSG $SrcNick :Error: Your key is not a known account." | $IrcLogpipe >> "$Ircfifo"
                                        fi
                                    else
                                    fi
                                    echo "PRIVMSG $SrcNick :Error: Invalid PGP MESSAGE" | $IrcLogpipe >> "$Ircfifo"
                                    unset IrcMsg[$i] SrcCurrent[$i] SrcTimeIn[$i]
                                fi
                            else
                                for i in "${!SrcCurrent[@]}" 32768 ; do 
                                    [[ "${SrcCurrent[$i]}" == "$src" ]] && break
                                done
                                echo "PRIVMSG $SrcNick :Error: PGP MESSAGE exceed limit (64 lines)" | $IrcLogpipe >> "$Ircfifo"
                                unset IrcMsg[$i] SrcCurrent[$i] SrcTimeIn[$i]
                            fi
                        fi
                        ;;
                        "$IrcNick") ((RANDOM%2)) && echo "PRIVMSG $SrcNick :I don't like you :-p" | $IrcLogpipe >> "$Ircfifo" ;;
                esac
        esac
        #echo "$(fortune)" | gpg --sign --armour -u CBB00E8E! | while read line ; do echo "PRIVMSG $target :$line" ; done | $IrcLogpipe >> "$Ircfifo"
    done < <( ( echo -e "USER $IrcUser 0 _ :$IrcComment\nNICK $IrcNick\nJOIN $IrcChan" ; tail -f "$Ircfifo" ) | nc $IrcServ )
    ps -o pid,command | while read pid comm ; do [[ "$comm" =~ ^"tail -f $Ircfifo" ]] && kill $pid ; done
    rm -f "$Ircfifo"
done
}
